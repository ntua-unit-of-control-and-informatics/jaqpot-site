/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/auth/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate JWT
         * @description Validate a JWT token
         */
        get: operations["validateJWT"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new model */
        post: operations["createModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get paginated models */
        get: operations["getModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for models */
        get: operations["searchModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/shared-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get paginated shared models */
        get: operations["getSharedModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Model
         * @description Retrieve a single model by its ID
         */
        get: operations["getModelById"];
        put?: never;
        post?: never;
        /**
         * Delete a Model
         * @description Delete a single model by its ID
         */
        delete: operations["deleteModelById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models/legacy/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a legacy model
         * @description Retrieve a single model by its ID
         */
        get: operations["getLegacyModelById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models/{modelId}/predict": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Predict with Model
         * @description Submit a dataset for prediction using a specific model
         */
        post: operations["predictWithModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models/{modelId}/predict/csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Predict using CSV with Model
         * @description Submit a dataset for prediction using a specific model
         */
        post: operations["predictWithModelCSV"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models/{id}/partial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Partially update specific fields of a model */
        patch: operations["partiallyUpdateModel"];
        trace?: never;
    };
    "/v1/models/{modelId}/features/{featureId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a feature for a specific model
         * @description Update the name, description, and feature type of an existing feature within a specific model
         */
        patch: operations["partiallyUpdateModelFeature"];
        trace?: never;
    };
    "/v1/user/datasets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datasets by User ID
         * @description Retrieve all datasets associated with a specific user ID
         */
        get: operations["getDatasets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/datasets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Dataset
         * @description Retrieve a single dataset by its ID
         */
        get: operations["getDatasetById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all organizations for a specific user */
        get: operations["getAllOrganizationsForUser"];
        put?: never;
        /** Create a new organization */
        post: operations["createOrganization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all user organizations */
        get: operations["getAllOrganizationsByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{id}/partial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Partially update an existing organization */
        patch: operations["partialUpdateOrganization"];
        trace?: never;
    };
    "/v1/organizations/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get organization by name */
        get: operations["getOrganizationByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{orgName}/invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all invitations for an organization
         * @description This endpoint allows an organization admin to get all invitations for their organization.
         */
        get: operations["getAllInvitations"];
        put?: never;
        /**
         * Create new invitations for an organization
         * @description This endpoint allows an organization admin to create new invitations for users.
         */
        post: operations["createInvitations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{orgId}/invitations/{id}/resend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend an invitation email
         * @description This endpoint allows an organization admin to resend an invitation email if it has not expired. Only organization admins can access this endpoint.
         */
        post: operations["resendInvitation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{name}/invitations/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the status of an invitation
         * @description This endpoint allows a user to check the status of an invitation.
         */
        get: operations["getInvitation"];
        /**
         * Update the status of an invitation
         * @description This endpoint allows a user to update the status of an invitation.
         */
        put: operations["updateInvitation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/leads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Leads
         * @description Retrieve all leads
         */
        get: operations["getAllLeads"];
        put?: never;
        /**
         * Create a Lead
         * @description Create a new lead
         */
        post: operations["createLead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/leads/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Lead by ID
         * @description Retrieve a single lead by its ID
         */
        get: operations["getLeadById"];
        /**
         * Update a Lead by ID
         * @description Update the details of an existing lead
         */
        put: operations["updateLeadById"];
        post?: never;
        /**
         * Delete a Lead by ID
         * @description Delete a single lead by its ID
         */
        delete: operations["deleteLeadById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Model: {
            /**
             * Format: int64
             * @example 0
             */
            id?: number;
            /** @description A JSON object containing meta information. */
            meta?: {
                [key: string]: Record<string, never>;
            };
            /** @example My Model */
            name: string;
            /** @example A description of your model */
            description?: string;
            type: components["schemas"]["ModelType"];
            /** @example 1.0.0 */
            jaqpotpyVersion: string;
            libraries: components["schemas"]["Library"][];
            dependentFeatures: components["schemas"]["Feature"][];
            independentFeatures: components["schemas"]["Feature"][];
            sharedWithOrganizations?: components["schemas"]["Organization"][];
            visibility: components["schemas"]["ModelVisibility"];
            task: components["schemas"]["ModelTask"];
            /**
             * Format: byte
             * @description A base64 representation of the actual model.
             */
            actualModel: string;
            creator?: components["schemas"]["User"];
            /** @description If the current user can edit the model */
            canEdit?: boolean;
            isAdmin?: boolean;
            tags?: string;
            legacyPredictionService?: string;
            extraConfig?: components["schemas"]["ModelExtraConfig"];
            /**
             * Format: date-time
             * @description The date and time when the feature was created.
             * @example 2023-01-01T12:00:00Z
             */
            createdAt?: Record<string, never>;
            /**
             * @description The date and time when the feature was last updated.
             * @example 2023-01-01T12:00:00Z
             */
            updatedAt?: Record<string, never>;
        };
        ModelSummary: {
            /**
             * Format: int64
             * @example 0
             */
            id: number;
            /** @example My Model */
            name: string;
            visibility: components["schemas"]["ModelVisibility"];
            /** @example A description of your model */
            description?: string;
            creator?: components["schemas"]["User"];
            type: components["schemas"]["ModelType"];
            dependentFeaturesLength?: number;
            independentFeaturesLength?: number;
            sharedWithOrganizations: components["schemas"]["OrganizationSummary"][];
            /**
             * Format: date-time
             * @description The date and time when the feature was created.
             * @example 2023-01-01T12:00:00Z
             */
            createdAt: Record<string, never>;
            /**
             * @description The date and time when the feature was last updated.
             * @example 2023-01-01T12:00:00Z
             */
            updatedAt?: Record<string, never>;
        };
        OrganizationSummary: {
            /**
             * Format: int64
             * @example 0
             */
            id: number;
            /** @example My Organization */
            name: string;
        };
        /** @enum {string} */
        ModelType: "SKLEARN" | "TORCH" | "R_BNLEARN_DISCRETE" | "R_CARET" | "R_GBM" | "R_NAIVE_BAYES" | "R_PBPK" | "R_RF" | "R_RPART" | "R_SVM" | "R_TREE_CLASS" | "R_TREE_REGR" | "QSAR_TOOLBOX";
        /** @description A JSON object containing extra configuration for the model */
        ModelExtraConfig: {
            torchConfig?: {
                [key: string]: Record<string, never>;
            };
            preprocessors?: components["schemas"]["Transformer"][];
            featurizers?: components["schemas"]["Transformer"][];
            doa?: components["schemas"]["Transformer"][];
        };
        /** @description A preprocessor for the model */
        Transformer: {
            /** @example StandardScaler */
            name: string;
            config: {
                [key: string]: Record<string, never>;
            };
        };
        /** @enum {string} */
        ModelVisibility: "PUBLIC" | "ORG_SHARED" | "PRIVATE";
        /** @enum {string} */
        ModelTask: "REGRESSION" | "BINARY_CLASSIFICATION" | "MULTICLASS_CLASSIFICATION";
        Library: {
            /** Format: int64 */
            id?: number;
            /** @example Library Name */
            name: string;
            /** @example 1.24.0 */
            version: string;
            /**
             * Format: date-time
             * @description The date and time when the feature was created.
             * @example 2023-01-01T12:00:00Z
             */
            createdAt?: Record<string, never>;
            /**
             * @description The date and time when the feature was last updated.
             * @example 2023-01-01T12:00:00Z
             */
            updatedAt?: Record<string, never>;
        };
        Feature: {
            /**
             * Format: int64
             * @example 1
             */
            id?: number;
            /** @description A JSON object containing meta information. */
            meta?: {
                [key: string]: Record<string, never>;
            };
            /**
             * @description A key that must start with a letter, followed by any combination of letters, digits, hyphens, or underscores. For example, 'abc123', 'abc-test', or 'Abc_test'. It cannot start with a digit.
             * @example feature-key
             */
            key: string;
            /**
             * @description A name for the feature that will appear on top of the form field
             * @example A feature name
             */
            name: string;
            /**
             * @description A name for the feature that will appear on top of the form field
             * @example A feature unit
             */
            units?: string;
            description?: string;
            featureType: components["schemas"]["FeatureType"];
            /**
             * @example DEPENDENT
             * @enum {string}
             */
            featureDependency?: "DEPENDENT" | "INDEPENDENT";
            /** @example true */
            visible?: boolean;
            possibleValues?: components["schemas"]["FeaturePossibleValue"][];
            /**
             * Format: date-time
             * @description The date and time when the feature was created.
             * @example 2023-01-01T12:00:00Z
             */
            createdAt?: Record<string, never>;
            /**
             * @description The date and time when the feature was last updated.
             * @example 2023-01-01T12:00:00Z
             */
            updatedAt?: Record<string, never>;
        };
        FeaturePossibleValue: {
            /** @example value */
            key: string;
            /** @example value */
            value: string;
        };
        /**
         * @example FLOAT
         * @enum {string}
         */
        FeatureType: "INTEGER" | "FLOAT" | "CATEGORICAL" | "SMILES" | "STRING" | "TEXT";
        /**
         * @example PREDICTION
         * @enum {string}
         */
        DatasetType: "PREDICTION";
        Dataset: {
            /**
             * Format: int64
             * @example 1
             */
            id?: number;
            type: components["schemas"]["DatasetType"];
            /**
             * @example ARRAY
             * @enum {string}
             */
            entryType: "ARRAY";
            input: unknown[];
            result?: unknown[];
            /** @enum {string} */
            status?: "CREATED" | "EXECUTING" | "FAILURE" | "SUCCESS";
            failureReason?: string;
            userId?: string;
            /** Format: int64 */
            modelId?: number;
            modelName?: string;
            executedAt?: Record<string, never>;
            executionFinishedAt?: Record<string, never>;
            createdAt?: Record<string, never>;
            updatedAt?: Record<string, never>;
        };
        DatasetCSV: {
            /**
             * Format: int64
             * @example 1
             */
            id?: number;
            type: components["schemas"]["DatasetType"];
            /**
             * Format: byte
             * @description A base64 representation in CSV format of the input values.
             */
            inputFile: string;
            values?: unknown[];
            /** @enum {string} */
            status?: "CREATED" | "EXECUTING" | "FAILURE" | "SUCCESS";
            failureReason?: string;
            /** Format: int64 */
            modelId?: number;
            modelName?: string;
            executedAt?: Record<string, never>;
            executionFinishedAt?: Record<string, never>;
            createdAt?: Record<string, never>;
            updatedAt?: Record<string, never>;
        };
        Organization: {
            /** Format: int64 */
            id?: number;
            /** @example my-awesome-org */
            name: string;
            creator?: components["schemas"]["User"];
            visibility: components["schemas"]["OrganizationVisibility"];
            /** @example An awesome organization for managing models. */
            description?: string;
            organizationMembers?: components["schemas"]["OrganizationUser"][];
            /** @example contact@my-awesome-org.com */
            contactEmail: string;
            /** @example +1234567890 */
            contactPhone?: string;
            /** @example http://www.my-awesome-org.com */
            website?: string;
            /** @example 123 Organization St., City, Country */
            address?: string;
            /** @description If the current user can edit the organization */
            canEdit?: boolean;
            /** @description If the current user is a member of the organization */
            isMember?: boolean;
            created_at?: Record<string, never>;
            updated_at?: Record<string, never>;
        };
        OrganizationUser: {
            /** Format: int64 */
            id?: number;
            userId: string;
            username: string;
            /** Format: email */
            email: string;
            associationType: components["schemas"]["OrganizationUserAssociationType"];
        };
        /** @enum {string} */
        OrganizationUserAssociationType: "ADMIN" | "MEMBER";
        /** @enum {string} */
        OrganizationVisibility: "PUBLIC" | "PRIVATE";
        OrganizationInvitation: {
            /**
             * Format: uuid
             * @description ID of the invitation
             */
            id?: string;
            /** @description The user id associated with that invitation */
            userId?: string;
            /**
             * Format: email
             * @description Email address of the invited user
             */
            userEmail: string;
            /**
             * @description Status of the invitation
             * @enum {string}
             */
            status: "PENDING" | "REJECTED" | "ACCEPTED";
            /** @description Expiration date of the invitation */
            expirationDate: Record<string, never>;
        };
        Lead: {
            id?: number;
            email?: string;
            name?: string;
            /** @enum {string} */
            status?: "PENDING" | "APPROVED" | "DENIED";
        };
        /** User */
        User: {
            id: string;
            username?: string;
            email?: string;
            emailVerified?: boolean;
        };
        ErrorResponse: {
            /** @description Error message */
            message?: string;
            /** @description Error code */
            code?: number;
        };
        /** @enum {string} */
        ErrorCode: "1001";
        /** @description Can be any value - string, number, boolean, array or object. */
        AnyValue: unknown;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    validateJWT: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description JWT is valid */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createModel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Model"];
            };
        };
        responses: {
            /** @description Model created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getModels: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sort?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        content?: components["schemas"]["ModelSummary"][];
                        totalElements?: number;
                        totalPages?: number;
                        pageSize?: number;
                        pageNumber?: number;
                    };
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchModels: {
        parameters: {
            query: {
                query: string;
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        content?: components["schemas"]["ModelSummary"][];
                        totalElements?: number;
                        totalPages?: number;
                        pageSize?: number;
                        pageNumber?: number;
                    };
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSharedModels: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sort?: string[];
                organizationId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of shared models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        content?: components["schemas"]["ModelSummary"][];
                        totalElements?: number;
                        totalPages?: number;
                        pageSize?: number;
                        pageNumber?: number;
                    };
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getModelById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the model to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteModelById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the model to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLegacyModelById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the model to retrieve */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    predictWithModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the model to use for prediction */
                modelId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Dataset"];
            };
        };
        responses: {
            /** @description Prediction created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    predictWithModelCSV: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the model to use for prediction */
                modelId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatasetCSV"];
            };
        };
        responses: {
            /** @description Prediction created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    partiallyUpdateModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    description?: string;
                    visibility: components["schemas"]["ModelVisibility"];
                    task: components["schemas"]["ModelTask"];
                    tags?: string;
                    sharedWithOrganizationIds?: number[];
                };
            };
        };
        responses: {
            /** @description Model fields updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    partiallyUpdateModelFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the model containing the feature */
                modelId: number;
                /** @description The ID of the feature to update */
                featureId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description A name for the feature that will appear on top of the form field
                     * @example Updated Feature Name
                     */
                    name: string;
                    /**
                     * @description The units that this feature is using
                     * @example mg/L
                     */
                    units?: string;
                    /** @example An updated description for this feature */
                    description?: string;
                    featureType: components["schemas"]["FeatureType"];
                    possibleValues?: components["schemas"]["FeaturePossibleValue"][];
                };
            };
        };
        responses: {
            /** @description Feature updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feature"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Model or feature not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDatasets: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sort?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        content?: components["schemas"]["Dataset"][];
                        totalElements?: number;
                        totalPages?: number;
                        pageSize?: number;
                        pageNumber?: number;
                    };
                };
            };
            /** @description User or datasets not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDatasetById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dataset to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Dataset"];
                };
            };
            /** @description Model not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllOrganizationsForUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"][];
                };
            };
        };
    };
    createOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Organization"];
            };
        };
        responses: {
            /** @description Organization created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllOrganizationsByUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"][];
                };
            };
        };
    };
    partialUpdateOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    description?: string;
                    /** Format: email */
                    contactEmail: string;
                    visibility: components["schemas"]["OrganizationVisibility"];
                };
            };
        };
        responses: {
            /** @description Organization updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrganizationByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllInvitations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the organization */
                orgName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invitations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationInvitation"][];
                };
            };
            /** @description Bad request, invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized, only admins can access this endpoint */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createInvitations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the organization */
                orgName: string;
            };
            cookie?: never;
        };
        /** @description Invitation request payload */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description List of email addresses to invite
                     * @example [
                     *       "user1@example.com",
                     *       "user2@example.com"
                     *     ]
                     */
                    emails?: string[];
                };
            };
        };
        responses: {
            /** @description Invitations created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request, invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized, only admins can create invitations */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Too many requests, rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resendInvitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                orgId: number;
                /** @description ID of the invitation */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invitation resent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request, invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized, only organization admins can access this endpoint */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Organization or invitation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gone, the invitation has expired */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getInvitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the organization */
                name: string;
                /** @description UUID of the invitation */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invitation status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationInvitation"];
                };
            };
            /** @description Bad request, invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invitation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateInvitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the organization */
                name: string;
                /** @description UUID of the invitation */
                uuid: string;
            };
            cookie?: never;
        };
        /** @description Invitation status update payload */
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationInvitation"];
            };
        };
        responses: {
            /** @description Invitation status updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationInvitation"];
                };
            };
            /** @description Bad request, invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invitation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllLeads: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"][];
                };
            };
        };
    };
    createLead: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lead created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLeadById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the lead to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"];
                };
            };
            /** @description Lead not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLeadById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the lead to update */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Lead"];
            };
        };
        responses: {
            /** @description Lead updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lead not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLeadById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the lead to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lead deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lead not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
